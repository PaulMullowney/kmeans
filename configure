#!/bin/bash
echo Command line: ./configure $@
# save config command to log
echo Command line: ./configure $@ > config.log
# NOTE: this is a simple script wrapper around the cmake command line tools, for
# those used to the autotools configure script conventions
# also, cmake has rather lame command-line args so this is generally quite useful
# for the lazy typers as well.

echo "Running simple configure script wrapper around cmake build system!"
echo "args are:"
echo "  --enable-debug (or --debug)  enable debug, non-optimized build"
echo "  --enable-release (or --release)  enable release, maximum optimized build (-O3 on gcc)"
echo "  --prefix=<path>              set the install prefix to path"
echo "  --suffix=<name>              add an extra custom suffix on the end of build files"
echo "  --clean                      clean existing cmake cache etc first: start fresh"
echo "  --build-dir=<name>           provide a custom build directory name (else auto)."
echo "  --verbose-build (or --verbose or -v) turn on verbose make output: for make probs"
echo "  --build-documentation        build doxygen and other documentation "
echo "  --with-cuda                  build library with cuda "
echo "  --cuda-35                    build CUDA kernels with Compute Capability 35 only "
echo "  --cuda-30                    build CUDA kernels with Compute Capability 30 only "
echo "  --atlas_sh                   build with atlas libraries in this non standard place "
echo " "
echo "  (note: -- before args is optional, and - works too!)"
echo " "


if [[ `hostname -s` = r01* ]]; then
    echo "On an r01* node. Using CUDA installed at /mnt/tier2/ctusk/cuda/cuda-5.5"
    export CUDA_BIN_PATH=/mnt/tier2/ctusk/cuda/cuda-5.5
fi

cmake_cmd="cmake ../ -DBUILD_SHARED_LIBS=1"
build_dir="build"
extra_suffix=""

while [ $# -gt 0 ]
do
  preq=${1%=*}			# get part before =
  case $preq
  in
    --suffix | -suffix | suffix)
      extra_suffix=${1##*=}		# get part after =
      cmake_cmd="$cmake_cmd -DEXTRA_SUFFIX=$extra_suffix"
      build_dir="${build_dir}${extra_suffix}"
      shift 1
    ;;
    --debug | --enable-debug | debug | enable-debug | -debug | -enable-debug | d | -d)
      debug=true
      cmake_cmd="$cmake_cmd -DCMAKE_BUILD_TYPE=Debug"
      build_dir="${build_dir}_dbg"
      shift 1
    ;;
    --release | --enable-release | release | enable-release | -release | -enable-release | r | -r)
      cmake_cmd="$cmake_cmd -DCMAKE_BUILD_TYPE=Release"
      shift 1
    ;;
    --prefix | -prefix | prefix | p | -p)
      prefix=${1##*=}		# get part after =
      cmake_cmd="$cmake_cmd -DCMAKE_INSTALL_PREFIX=$prefix"
      shift 1
    ;;

    --clean | -clean | clean | -c)
      clean=true
      shift 1
    ;;

    --verbose-build | --verbose | verbose | -v | v | -verbose | verbose-build | -verbose-build)
      verbose_build=true
      shift 1
    ;;

    --build-documentation | --documentation)
      cmake_cmd="$cmake_cmd -DBUILD_DOCUMENTATION=ON"
      shift 1
    ;;


    --disable-cuda)
      cmake_cmd="$cmake_cmd -DWITH_CUDA=OFF"
      shift 1    ;;

    --cuda-35)
      cmake_cmd="$cmake_cmd -DCUDA_ARCH_35=ON"
      shift 1    ;;

    --cuda-30)
      cmake_cmd="$cmake_cmd -DCUDA_ARCH_30=ON"
      shift 1    ;;

    --atlas_sh)
      cmake_cmd="$cmake_cmd -DCMAKE_INCLUDE_PATH=/mnt/tier2/acomp_stage/atlas_sh/include -DCMAKE_LIBRARY_PATH=/mnt/tier2/acomp_stage/atlas_sh/lib -DBLAS_LIBRARIES=/mnt/tier2/acomp_stage/atlas_sh/lib/libcblas.a"
      shift 1    ;;

#-DLAPACK_LIBRARIES=/mnt/tier2/acomp_stage/atlas_sh/lib/libatlas.a
      
    # configure scripts generated by autotools use --build for a different
    # purpose (to indicate architecture).  Don't allow such shortcuts here,
    # because they interfere with the MOTU scripts.
    --build-dir | -build-dir | build-dir) # | build | --build | -build)
      build_dir=${1##*=}		# get part after =
      shift 1
    ;;

    *)
      echo "Invalid argument -- please see above list"
      shift 1
    ;;
  esac
done

if [[ $verbose_build == "true" ]]; then
    cmake_cmd="$cmake_cmd -DCMAKE_VERBOSE_MAKEFILE=ON"
else 
    cmake_cmd="$cmake_cmd -DCMAKE_VERBOSE_MAKEFILE=OFF"
fi

# Support building in trunk by passing in pwd keyword
# $(pwd) didn't work for out of source builds
if [[ "$build_dir" == "pwd" ]];
then
  # Don't run cmake in your home directory..
  # Also don't try to make or go to the build dir, we are already there
  cmake_cmd="$(echo $cmake_cmd | sed 's/\.\.\///')"
else
  mkdir -p "$build_dir"
  cd "$build_dir" || exit 1
fi

echo " "
echo "####################################################"
echo "configure script settings:"
echo "  debug:        $debug"
echo "  prefix:       $prefix"
echo "  suffix:       $extra_suffix"
echo "  clean:        $clean"
echo "  build-dir:    $build_dir"
echo "  verbose:      $verbose_build"
echo " "
echo "  cmake command: $cmake_cmd"
echo " "

if [[ $clean == "true" ]]; then
    echo "NOTE: Cleaning files now!"
    /bin/rm -rf *
fi

$cmake_cmd

echo " "
echo "####################################################"
echo "Now you must type: cd $build_dir; make; make install"
echo "to actually build and install the software"
echo " "
