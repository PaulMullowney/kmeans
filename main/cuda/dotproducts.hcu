#if !defined(_DOT_PRODUCTS_HCU_)
#define _DOT_PRODUCTS_HCU_


template<const int T1, const int T2>
__device__ __inline__ void _dev_dotproducts(float2 A[TILESIZEY][T1],
					    float2 B[TILESIZEY][T2],
					    float2 * Creg) {

  float2 t1, t2;
  for (int k=0; k<TILESIZE; ++k) {
    t1 = A[threadIdx.y][k];
    t2 = B[threadIdx.x][k];
    Creg[0] = fma<float,float2>(t1.x,t2,Creg[0]);
    Creg[1] = fma<float,float2>(t1.y,t2,Creg[1]);
  }
}

template<const int T1, const int T2>
__device__ __inline__ void _dev_dotproducts(double2 A[TILESIZEY][T1],
					    double2 B[TILESIZEY][T2],
					    double2 * Creg) {

  double2 t1, t2;
  for (int k=0; k<TILESIZE; ++k) {
    t1 = A[threadIdx.y][k];
    t2 = B[threadIdx.x][k];
    Creg[0] = fma<double,double2>(t1.x,t2,Creg[0]);
    Creg[1] = fma<double,double2>(t1.y,t2,Creg[1]);
  }
}


template<const int T1, const int T2>
__device__ __inline__ void _dev_dotproducts(float4 A[TILESIZEY][T1],
					    float4 B[TILESIZEY][T2],
					    float4 * Creg) {
#if 1

  float4 t1, t2, t3, t4;
#pragma unroll
  for (int k=0; k<TILESIZE; k+=2) {
    double4 * a = reinterpret_cast<double4 *>(&(A[threadIdx.y][k]));
    double4 d1 = a[0];

    t1 = make_float4(__int_as_float(__double2loint(d1.x)), __int_as_float(__double2hiint(d1.x)),
    		     __int_as_float(__double2loint(d1.y)), __int_as_float(__double2hiint(d1.y)));
    t3 = make_float4(__int_as_float(__double2loint(d1.z)), __int_as_float(__double2hiint(d1.z)),
    		     __int_as_float(__double2loint(d1.w)), __int_as_float(__double2hiint(d1.w)));

    double4 * b = reinterpret_cast<double4 *>(&(B[threadIdx.x][k]));
    double4 d2 = b[0];

    t2 = make_float4(__int_as_float(__double2loint(d2.x)), __int_as_float(__double2hiint(d2.x)),
		     __int_as_float(__double2loint(d2.y)), __int_as_float(__double2hiint(d2.y)));
    t4 = make_float4(__int_as_float(__double2loint(d2.z)), __int_as_float(__double2hiint(d2.z)),
		     __int_as_float(__double2loint(d2.w)), __int_as_float(__double2hiint(d2.w)));

    Creg[0] = fma<float,float4>(t1.x,t2,Creg[0]);
    Creg[1] = fma<float,float4>(t1.y,t2,Creg[1]);
    Creg[2] = fma<float,float4>(t1.z,t2,Creg[2]);
    Creg[3] = fma<float,float4>(t1.w,t2,Creg[3]);

    Creg[0] = fma<float,float4>(t3.x,t4,Creg[0]);
    Creg[1] = fma<float,float4>(t3.y,t4,Creg[1]);
    Creg[2] = fma<float,float4>(t3.z,t4,Creg[2]);
    Creg[3] = fma<float,float4>(t3.w,t4,Creg[3]);
  }

#else

  float4 t1, t2;
#pragma unroll
  for (int k=0; k<TILESIZE; ++k) {
    t1 = A[threadIdx.y][k];
    t2 = B[threadIdx.x][k];
    
    Creg[0] = fma<float,float4>(t1.x,t2,Creg[0]);
    Creg[1] = fma<float,float4>(t1.y,t2,Creg[1]);
    Creg[2] = fma<float,float4>(t1.z,t2,Creg[2]);
    Creg[3] = fma<float,float4>(t1.w,t2,Creg[3]);
  }
#endif
}


template<const int T1, const int T2>
__device__ __inline__ void _dev_dotproducts(double4 A[TILESIZEY][T1],
					    double4 B[TILESIZEY][T2],
					    double4 * Creg) {

  double4 t1, t2;
#pragma unroll
  for (int k=0; k<TILESIZE; ++k) {
    t1 = A[threadIdx.y][k];
    t2 = B[threadIdx.x][k];
    Creg[0] = fma<double,double4>(t1.x,t2,Creg[0]);
    Creg[1] = fma<double,double4>(t1.y,t2,Creg[1]);
    Creg[2] = fma<double,double4>(t1.z,t2,Creg[2]);
    Creg[3] = fma<double,double4>(t1.w,t2,Creg[3]);
  }
}

template<const int LENGTH, const int T1, const int T2>
__device__ __inline__ void _dev_dotproductsF(float4 A[TILESIZEY][T1],
					     float4 B[TILESIZEY][T2],
					     float4 * Creg) {
  float4 t1, t2;
#pragma unroll
  for (int k=0; k<LENGTH; ++k) {
    t1 = A[threadIdx.y][k];
    t2 = B[threadIdx.x][k];

    Creg[0] = fma<float,float4>(t1.x,t2,Creg[0]);
    Creg[1] = fma<float,float4>(t1.y,t2,Creg[1]);
    Creg[2] = fma<float,float4>(t1.z,t2,Creg[2]);
    Creg[3] = fma<float,float4>(t1.w,t2,Creg[3]);
  }
}


template<const int LENGTH, const int T1, const int T2>
__device__ __inline__ void _dev_dotproductsF(double4 A[TILESIZEY][T1],
					     double4 B[TILESIZEY][T2],
					     double4 * Creg) {
  double4 t1, t2;
  for (int k=0; k<LENGTH; ++k) {
    t1 = A[threadIdx.y][k];
    t2 = B[threadIdx.x][k];
    Creg[0] = fma<double,double4>(t1.x,t2,Creg[0]);
    Creg[1] = fma<double,double4>(t1.y,t2,Creg[1]);
    Creg[2] = fma<double,double4>(t1.z,t2,Creg[2]);
    Creg[3] = fma<double,double4>(t1.w,t2,Creg[3]);
  }
}

template<const int LENGTH, const int T1, const int T2>
__device__ __inline__ void _dev_dotproductsF(float2 A[TILESIZEY][T1],
					     float2 B[TILESIZEY][T2],
					     float2 * Creg) {
  float2 t1, t2;
  for (int k=0; k<LENGTH; ++k) {
    t1 = A[threadIdx.y][k];
    t2 = B[threadIdx.x][k];
    Creg[0] = fma<float,float2>(t1.x,t2,Creg[0]);
    Creg[1] = fma<float,float2>(t1.y,t2,Creg[1]);
  }
}

template<const int LENGTH, const int T1, const int T2>
__device__ __inline__ void _dev_dotproductsF(double2 A[TILESIZEY][T1],
					     double2 B[TILESIZEY][T2],
					     double2 * Creg) {
  double2 t1, t2;
  for (int k=0; k<LENGTH; ++k) {
    t1 = A[threadIdx.y][k];
    t2 = B[threadIdx.x][k];
    Creg[0] = fma<double,double2>(t1.x,t2,Creg[0]);
    Creg[1] = fma<double,double2>(t1.y,t2,Creg[1]);
  }
}


#endif /* !defined(_DOT_PRODUCTS_HCU_) */
