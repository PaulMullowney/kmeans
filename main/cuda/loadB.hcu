#if !defined(_LOAD_B_HCU_)
#define _LOAD_B_HCU_

template<class TYPE, class VTYPE>
__device__ __inline__ VTYPE _dev_loadB(const TYPE * __restrict__ B) {
}

template<>
__device__ __inline__ float2 _dev_loadB(const float * __restrict__ B) {
  return make_float2(B[0], B[TILESIZE]); 
}

template<>
__device__ __inline__ double2 _dev_loadB(const double * __restrict__ B) {
  return make_double2(B[0], B[TILESIZE]); 
}


template<>
__device__ __inline__ float4 _dev_loadB(const float * __restrict__ B) {

#if 1
  return make_float4(B[0], B[TILESIZE], B[2*TILESIZE], B[3*TILESIZE]);
#else  
  float tx = B[0];
  float tz = B[2*TILESIZE];
  float y = B[dev_nColsB];
  float w = B[dev_nColsB+2*TILESIZE];
  float ty = __shfl_down(tx, TILESIZE);
  float tw = __shfl_down(tz, TILESIZE);

  if (threadIdx.y&1) {
    ty = y;
    tw = w;
  }
  float a = tx;
  float b = tz;

  tx = __shfl_up(y, TILESIZE);
  tz = __shfl_up(w, TILESIZE);

  int tid = threadIdx.x + (threadIdx.y&1)*blockDim.x;
  if (tid<blockDim.x) {
    tx = a;
    tz = b;
  }
  return make_float4(tx,ty,tz,tw);
#endif
}

template<>
__device__ __inline__ double4 _dev_loadB(const double * __restrict__ B) {
  return make_double4(B[0], B[TILESIZE], B[2*TILESIZE], B[3*TILESIZE]);
}

#endif /* !defined(_LOAD_B_HCU_) */
