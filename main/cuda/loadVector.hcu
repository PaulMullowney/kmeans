#if !defined(_LOAD_VECTOR_HCU_)
#define _LOAD_VECTOR_HCU_

#include "zero.hcu"

template<class TYPE, class VTYPE>
__device__ __inline__ void _dev_loadVector(const int i, const int n,
						  const TYPE * __restrict__ x, 
						  VTYPE& xreg) {
}

template<>
__device__ __inline__ void _dev_loadVector(const int i, const int n, 
						  const float * __restrict__ x, 
						  float2& xreg) {

  zero<float2>(xreg);
  if (i<n)          xreg.x =  x[i];
  if (i+TILESIZE<n) xreg.y =  x[i+TILESIZE];
}

template<>
__device__ __inline__ void _dev_loadVector(const int i, const int n, 
						  const double * __restrict__ x, 
						  double2& xreg) {

  zero<double2>(xreg);
  if (i<n)          xreg.x =  x[i];
  if (i+TILESIZE<n) xreg.y =  x[i+TILESIZE];
}

template<>
__device__ __inline__ void _dev_loadVector(const int i, const int n, 
						  const float * __restrict__ x, 
						  float4& xreg) {

  zero<float4>(xreg);
  if (i<n)            xreg.x =  x[i];
  if (i+TILESIZE<n)   xreg.y =  x[i+TILESIZE];
  if (i+2*TILESIZE<n) xreg.z =  x[i+2*TILESIZE];
  if (i+3*TILESIZE<n) xreg.w =  x[i+3*TILESIZE];
}

template<>
__device__ __inline__ void _dev_loadVector(const int i, const int n, 
						  const double * __restrict__ x, 
						  double4& xreg) {

  zero<double4>(xreg);
  if (i<n)            xreg.x =  x[i];
  if (i+TILESIZE<n)   xreg.y =  x[i+TILESIZE];
  if (i+2*TILESIZE<n) xreg.z =  x[i+2*TILESIZE];
  if (i+3*TILESIZE<n) xreg.w =  x[i+3*TILESIZE];
}

#endif /* !defined(_LOAD_VECTOR_HCU_) */
