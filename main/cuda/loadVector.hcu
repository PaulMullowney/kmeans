#if !defined(_LOAD_VECTOR_HCU_)
#define _LOAD_VECTOR_HCU_

#include "zero.hcu"

template<class TYPE, class VTYPE>
__device__ __inline__ void _dev_loadVector(const int i, const int n,
					   const TYPE * __restrict__ x, 
					   VTYPE& xreg) {
}

template<>
__device__ __inline__ void _dev_loadVector(const int i, const int n, 
					   const float * __restrict__ x, 
					   float2& xreg) {

  zero<float2>(xreg);
  if (i<n)   xreg.x =  x[i];
  if (i+1<n) xreg.y =  x[i+1];
}

template<>
__device__ __inline__ void _dev_loadVector(const int i, const int n, 
					   const double * __restrict__ x, 
					   double2& xreg) {
  
  zero<double2>(xreg);
  if (i<n)   xreg.x =  x[i];
  if (i+1<n) xreg.y =  x[i+1];
}

template<>
__device__ __inline__ void _dev_loadVector(const int i, const int n, 
					   const float * __restrict__ x, 
					   float4& xreg) {

  zero<float4>(xreg);
  if (i<n)   xreg.x =  x[i];
  if (i+1<n) xreg.y =  x[i+1];
  if (i+2<n) xreg.z =  x[i+2];
  if (i+3<n) xreg.w =  x[i+3];
}


template<>
__device__ __inline__ void _dev_loadVector(const int i, const int n, 
					   const float * __restrict__ x, 
					   float6& xreg) {

  zero<float6>(xreg);
  if (i<n)   xreg.a =  x[i];
  if (i+1<n) xreg.b =  x[i+1];
  if (i+2<n) xreg.c =  x[i+2];
  if (i+3<n) xreg.d =  x[i+3];
  if (i+4<n) xreg.e =  x[i+4];
  if (i+5<n) xreg.f =  x[i+5];
}

template<>
__device__ __inline__ void _dev_loadVector(const int i, const int n, 
						  const double * __restrict__ x, 
						  double4& xreg) {

  zero<double4>(xreg);
  if (i<n)   xreg.x =  x[i];
  if (i+1<n) xreg.y =  x[i+1];
  if (i+2<n) xreg.z =  x[i+2];
  if (i+3<n) xreg.w =  x[i+3];
}

#endif /* !defined(_LOAD_VECTOR_HCU_) */
