#if !defined(_FMA_HCU_)
#define _FMA_HCU_

template<class TYPE, class VTYPE>
__device__ __inline__ VTYPE fma(TYPE d, VTYPE x, VTYPE y) {
  y.x = d*x.x + y.x;
  y.y = d*x.y + y.y;
  return y;
}


template<>
__device__ __inline__ float4 fma(float d, float4 x, float4 y) {
  y.x = d*x.x + y.x;
  y.y = d*x.y + y.y;
  y.z = d*x.z + y.z;
  y.w = d*x.w + y.w;
  return y;
}

template<>
__device__ __inline__ double4 fma(double d, double4 x, double4 y) {
  y.x = d*x.x + y.x;
  y.y = d*x.y + y.y;
  y.z = d*x.z + y.z;
  y.w = d*x.w + y.w;
  return y;
}

template<class TYPE, class VTYPE>
__device__ __inline__ VTYPE fms_shift(VTYPE x, VTYPE y, TYPE c) {
}

template<>
__device__ __inline__ float2 fms_shift(float2 x, float2 y, float c) {
  y.x = c + y.x - 2.0f*x.x;
  y.y = c + y.y - 2.0f*x.y;
  return y;
}

template<>
__device__ __inline__ double2 fms_shift(double2 x, double2 y, double c) {
  y.x = c + y.x - 2.0*x.x;
  y.y = c + y.y - 2.0*x.y;
  return y;
}

template<>
__device__ __inline__ float4 fms_shift(float4 x, float4 y, float c) {
  y.x = c + y.x - 2.0f*x.x;
  y.y = c + y.y - 2.0f*x.y;
  y.z = c + y.z - 2.0f*x.z;
  y.w = c + y.w - 2.0f*x.w;
  return y;
}

template<>
__device__ __inline__ double4 fms_shift(double4 x, double4 y, double c) {
  y.x = c + y.x - 2.0*x.x;
  y.y = c + y.y - 2.0*x.y;
  y.z = c + y.z - 2.0*x.z;
  y.w = c + y.w - 2.0*x.w;
  return y;
}

#endif /* !defined(_FMA_HCU_) */
