#if !defined(_REDUCTION_T_HCU_)
#define _REDUCTION_T_HCU_

#include "fma.hcu"
#include "vectorMin.hcu"

template<class VTYPE>
__device__ __inline__ void _dev_reductionT(const int c, VTYPE * Creg,
					   VTYPE L2normB[TILESIZE], 
					   VTYPE A[TILESIZEY][TILESIZEX],
					   VTYPE B[TILESIZEY][TILESIZEX]) {
}

template<>
__device__ __inline__ void _dev_reductionT(const int c, float2 * Creg,
					   float2 L2normB[TILESIZE],
					   float2 A[TILESIZEY][TILESIZEX],
					   float2 B[TILESIZEY][TILESIZEX]) {

  int tidx = threadIdx.x;
  int tidy = threadIdx.y;

  int2 i;
  float2 s;
  float2 t = L2normB[tidx];

  Creg[0] = fma<float,float2>(-2.0f,Creg[0],t);
  vectorMin<float,float2>(Creg[0],s.x,i.x);
  
  Creg[1] = fma<float,float2>(-2.0f,Creg[1],t);
  vectorMin<float,float2>(Creg[1],s.y,i.y);
    
  A[tidy][tidx] = s;
  B[tidy][tidx] = make_float2(i.x+c,i.y+c);
  
  __syncthreads();
    
  /* perform the partial reduction over each row in the  buffers */
  if (tidx%2==0) {
    A[tidy][tidx] = fminf(A[tidy][tidx],A[tidy][tidx+1],
			  B[tidy][tidx],B[tidy][tidx+1],s);
    B[tidy][tidx] = s;
  }
  if (tidx%4==0) {
    A[tidy][tidx] = fminf(A[tidy][tidx],A[tidy][tidx+2],
			  B[tidy][tidx],B[tidy][tidx+2],s);
    B[tidy][tidx] = s;
  }
  if (tidx%8==0) {
    A[tidy][tidx] = fminf(A[tidy][tidx],A[tidy][tidx+4],
			  B[tidy][tidx],B[tidy][tidx+4],s);
    B[tidy][tidx] = s;
  }
  if (tidx==0) {
    A[tidy][tidx] = fminf(A[tidy][tidx],A[tidy][tidx+8],
			  B[tidy][tidx],B[tidy][tidx+8],s);
    B[tidy][tidx] = s;
  }
  __syncthreads();
}

template<>
__device__ __inline__ void _dev_reductionT(const int c, double2 * Creg,
					   double2 L2normB[TILESIZE],
					   double2 A[TILESIZEY][TILESIZEX],
					   double2 B[TILESIZEY][TILESIZEX]) {

  int tidx = threadIdx.x;
  int tidy = threadIdx.y;

  int2 i;
  double2 s;
  double2 t = L2normB[tidx];

  Creg[0] = fma<double,double2>(-2.0,Creg[0],t);
  vectorMin<double,double2>(Creg[0],s.x,i.x);
  
  Creg[1] = fma<double,double2>(-2.0,Creg[1],t);
  vectorMin<double,double2>(Creg[1],s.y,i.y);
    
  A[tidy][tidx] = s;
  B[tidy][tidx] = make_double2(i.x+c,i.y+c);
  
  __syncthreads();
    
  /* perform the partial reduction over each row in the  buffers */
  if (tidx%2==0) {
    A[tidy][tidx] = fmind(A[tidy][tidx],A[tidy][tidx+1],
			  B[tidy][tidx],B[tidy][tidx+1],s);
    B[tidy][tidx] = s;
  }
  if (tidx%4==0) {
    A[tidy][tidx] = fmind(A[tidy][tidx],A[tidy][tidx+2],
			  B[tidy][tidx],B[tidy][tidx+2],s);
    B[tidy][tidx] = s;
  }
  if (tidx%8==0) {
    A[tidy][tidx] = fmind(A[tidy][tidx],A[tidy][tidx+4],
			  B[tidy][tidx],B[tidy][tidx+4],s);
    B[tidy][tidx] = s;
  }
  if (tidx==0) {
    A[tidy][tidx] = fmind(A[tidy][tidx],A[tidy][tidx+8],
			  B[tidy][tidx],B[tidy][tidx+8],s);
    B[tidy][tidx] = s;
  }
  __syncthreads();
}

template<>
__device__ __inline__ void _dev_reductionT(const int c, float4 * Creg,
					   float4 L2normB[TILESIZE],
					   float4 A[TILESIZEY][TILESIZEX],
					   float4 B[TILESIZEY][TILESIZEX]) {

  int tidx = threadIdx.x;
  int tidy = threadIdx.y;

  int4 i;
  float4 s;
  float4 t = L2normB[tidx];

  Creg[0] = fma<float,float4>(-2.0f,Creg[0],t);
  vectorMin<float,float4>(Creg[0],s.x,i.x);
  
  Creg[1] = fma<float,float4>(-2.0f,Creg[1],t);
  vectorMin<float,float4>(Creg[1],s.y,i.y);
  
  Creg[2] = fma<float,float4>(-2.0f,Creg[2],t);
  vectorMin<float,float4>(Creg[2],s.z,i.z);
  
  Creg[3] = fma<float,float4>(-2.0f,Creg[3],t);
  vectorMin<float,float4>(Creg[3],s.w,i.w);

  A[tidy][tidx] = s;
  B[tidy][tidx] = make_float4(i.x+c,i.y+c,i.z+c,i.w+c);  
  __syncthreads();
    
  /* perform the partial reduction over each row in the  buffers */
  if (tidx%2==0) {
    A[tidy][tidx] = fminf(A[tidy][tidx],A[tidy][tidx+1],
			  B[tidy][tidx],B[tidy][tidx+1],s);
    B[tidy][tidx] = s;
  }
  if (tidx%4==0) {
    A[tidy][tidx] = fminf(A[tidy][tidx],A[tidy][tidx+2],
			  B[tidy][tidx],B[tidy][tidx+2],s);
    B[tidy][tidx] = s;
  }
  if (tidx%8==0) {
    A[tidy][tidx] = fminf(A[tidy][tidx],A[tidy][tidx+4],
			  B[tidy][tidx],B[tidy][tidx+4],s);
    B[tidy][tidx] = s;
  }
  if (tidx==0) {
    A[tidy][tidx] = fminf(A[tidy][tidx],A[tidy][tidx+8],
			  B[tidy][tidx],B[tidy][tidx+8],s);
    B[tidy][tidx] = s;
  }
  __syncthreads();
}

template<>
__device__ __inline__ void _dev_reductionT(const int c, double4 * Creg,
					   double4 L2normB[TILESIZE],
					   double4 A[TILESIZEY][TILESIZEX],
					   double4 B[TILESIZEY][TILESIZEX]) {

  int tidx = threadIdx.x;
  int tidy = threadIdx.y;

  int4 i;
  double4 s;
  double4 t = L2normB[tidx];

  Creg[0] = fma<double,double4>(-2.0,Creg[0],t);
  vectorMin<double,double4>(Creg[0],s.x,i.x);
  
  Creg[1] = fma<double,double4>(-2.0,Creg[1],t);
  vectorMin<double,double4>(Creg[1],s.y,i.y);
  
  Creg[2] = fma<double,double4>(-2.0,Creg[2],t);
  vectorMin<double,double4>(Creg[2],s.z,i.z);
  
  Creg[3] = fma<double,double4>(-2.0,Creg[3],t);
  vectorMin<double,double4>(Creg[3],s.w,i.w);
  
  A[tidy][tidx] = s;
  B[tidy][tidx] = make_double4(i.x+c,i.y+c,i.z+c,i.w+c);  
  __syncthreads();
    
  /* perform the partial reduction over each row in the  buffers */
  if (tidx%2==0) {
    A[tidy][tidx] = fmind(A[tidy][tidx],A[tidy][tidx+1],
			  B[tidy][tidx],B[tidy][tidx+1],s);
    B[tidy][tidx] = s;
  }
  if (tidx%4==0) {
    A[tidy][tidx] = fmind(A[tidy][tidx],A[tidy][tidx+2],
			  B[tidy][tidx],B[tidy][tidx+2],s);
    B[tidy][tidx] = s;
  }
  if (tidx%8==0) {
    A[tidy][tidx] = fmind(A[tidy][tidx],A[tidy][tidx+4],
			  B[tidy][tidx],B[tidy][tidx+4],s);
    B[tidy][tidx] = s;
  }
  if (tidx==0) {
    A[tidy][tidx] = fmind(A[tidy][tidx],A[tidy][tidx+8],
			  B[tidy][tidx],B[tidy][tidx+8],s);
    B[tidy][tidx] = s;
  }
  __syncthreads();
}

#endif /* !defined(_REDUCTION_T_HCU_) */
